import PySimpleGUI as sg
import sqlite3 as bbb



# Cria a conexão e interage com o banco
conn = bbb.connect('CFTo.db')  # Conecta ao banco
c = conn.cursor()

# Criar o layout
layout = [
    [sg.Menu([
        ['Cadastro', ['Cadastro Clientes', 'Cadastro Fornecedores', 'Cadastro Transportadoras']],
        ['Consulta', ['Consulta Clientes', 'Consulta Fornecedores', 'Consulta Transportadoras']],
        ['Relatório', ['Relatório Clientes', 'Relatório Fornecedores', 'Relatório Transportadoras']]
    ], tearoff=False)]
]

# Criar a janela principal e chamar os componentes desta na janela
window = sg.Window("Sistema de vendas 1.0", layout, size=(600, 400))

while True:
    event, values = window.read()
    if event == sg.WINDOW_CLOSED:
        break

    # Acessa o submenu CADASTRO -> Cadastro clientes
    if event == 'Cadastro Clientes':

        cadastro_layout_clientes = [
            [sg.Text("Nome:")],
            [sg.InputText(key="nome")],
            [sg.Text("E-mail:")],
            [sg.InputText(key="email")],
            [sg.Text("Telefone:")],
            [sg.InputText(key="telefone")],
            [sg.Button("Cadastrar")],
            [sg.Button("Cancelar")]
        ]

        cadastro_clientes = sg.Window("Cadastro de clientes", cadastro_layout_clientes, size=(400, 300))

        while True:
            event, values = cadastro_clientes.read()

            if event == sg.WIN_CLOSED or event == "Cancelar":
                cadastro_clientes.close()
                break

            # Operações no Banco de dados
            c.execute('INSERT INTO clientes (nome, email, telefone) VALUES ( ?, ?, ?)',(values['nome'], values['email'], values['telefone']))
            conn.commit()

            # Limpa os campos após efetuar o cadastro
            cadastro_clientes["nome"].update("")
            cadastro_clientes["email"].update("")
            cadastro_clientes["telefone"].update("")

            # Mostrar pop-up após o cadastro
            sg.popup("Cadastro do cliente realizado com sucesso!")

        cadastro_clientes.close()


#

    #  # Acessa o submenu CADASTRO -> Cadastro Fornecedores

    if event == 'Cadastro Fornecedores':

        cadastro_layout_fornecedor = [
            [sg.Text("Nome do Fornecedor:")],
            [sg.InputText(key="nome_fornecedor")],
            [sg.Text("CNPJ:")],
            [sg.InputText(key="cnpj")],
            [sg.Button("Cadastrar")],
            [sg.Button("Cancelar")]
        ]

        cadastro_fornecedor = sg.Window("Cadastro de Fornecedores", cadastro_layout_fornecedor, size=(400, 200))

        while True:
            event, values = cadastro_fornecedor.read()

            if event == sg.WIN_CLOSED or event == "Cancelar":
                cadastro_fornecedor.close()
                break

            # Operações no Banco de dados
            c.execute("INSERT INTO Fornecedor (nome_fornecedor, cnpj) VALUES ( ?, ?)",( values["nome_fornecedor"], values["cnpj"]))
            conn.commit()

            # Limpa os campos após efetuar o cadastro
            cadastro_fornecedor["nome_fornecedor"].update("")
            cadastro_fornecedor["cnpj"].update("")

            # Mostrar pop-up após o cadastro
            sg.popup("Cadastro de Fornecedor realizado com sucesso!")

        cadastro_fornecedor.close()

#

#

 #  # Acessa o submenu CADASTRO -> Cadastro Transportadora

    if event == 'Cadastro Transportadoras':

        layoutCadastroTransportadoras = [
            [sg.Text('Empresa:')],
            [sg.InputText(key='empresa')],
            [sg.Text('E-mail: ')],
            [sg.InputText(key='email')],
            [sg.Text('Telefone: ')],
            [sg.InputText(key='tel')],
            [sg.Text('Código de rastreamento: ')],
            [sg.InputText(key='cod')],
            [sg.Button('Cadastrar'), sg.Button('Cancelar')],
        ]

        janelaCadastroTransportadoras = sg.Window('Cadastro de Transportadoras', layoutCadastroTransportadoras,
                                                  resizable=True)
        # loop para manter tela de cadastro aberta
        while True:
            event, values = janelaCadastroTransportadoras.read()

            if event == sg.WINDOW_CLOSED or event == 'Cancelar':
                janelaCadastroTransportadoras.close()
                break
            if event == 'Cadastrar':
                c.execute('INSERT INTO transportadora(empresa, email, telefone, cod_ratreio) VALUES(?, ?, ?, ?)',
                          (values['empresa'], values['email'], values['tel'], values['cod']))
                conn.commit()

            # atualiza os inputs após cadastrar
            janelaCadastroTransportadoras['empresa'].update('')
            janelaCadastroTransportadoras['email'].update('')
            janelaCadastroTransportadoras['tel'].update('')
            janelaCadastroTransportadoras['cod'].update('')

            sg.popup('Cadastro efetuado', title='Cadastrado', auto_close=True)

    # CONSULTA DE TRANSPORTADORAS
    if event == 'Consulta Transportadoras':

        layoutConsultaTransportadoras = [
            [sg.Text('Nome da empresa: '), sg.InputText(key='empresa')],
            [sg.Button('Consultar'), sg.Button('Mostrar todos'), sg.Button('Cancelar')],
            [sg.Table(values=[], headings=('Empresa', 'E-mail', 'Telefone', 'Codigo de rastreio'), justification='c',
                      expand_x=True, key='tabela', display_row_numbers=False,
                      auto_size_columns=False, num_rows=10)],
            [sg.Button('Nova transportadora'), sg.Button('Editar'), sg.Button('Excluir')]
        ]

        janelaConsultaTransportadoras = sg.Window('Consultar transportadora', layoutConsultaTransportadoras,
                                                  auto_size_buttons=True, resizable=True)

        while True:
            event, values = janelaConsultaTransportadoras.read()
            # fechar janela
            if event == sg.WINDOW_CLOSED or event == 'Cancelar':
                janelaConsultaTransportadoras.close()
                break

            if event == 'Nova transportadora':
                layoutCadastroTransportadoras = [
                    [sg.Text('Empresa:')],
                    [sg.InputText(key='empresa')],
                    [sg.Text('E-mail: ')],
                    [sg.InputText(key='email')],
                    [sg.Text('Telefone: ')],
                    [sg.InputText(key='tel')],
                    [sg.Text('Código de rastreamento: ')],
                    [sg.InputText(key='cod')],
                    [sg.Button('Cadastrar'), sg.Button('Cancelar')],
                ]

                janelaCadastroTransportadoras = sg.Window('Cadastro de Transportadoras', layoutCadastroTransportadoras,
                                                          resizable=True)
                # loop para manter tela de cadastro aberta
                while True:
                    event, values = janelaCadastroTransportadoras.read()

                    if event == sg.WINDOW_CLOSED or event == 'Cancelar':
                        janelaCadastroTransportadoras.close()
                        break
                    if event == 'Cadastrar':
                        c.execute(
                            'INSERT INTO transportadora(empresa, email, telefone, cod_ratreio) VALUES(?, ?, ?, ?)',
                            (values['empresa'], values['email'], values['tel'], values['cod']))
                        conn.commit()

                    # atualiza os inputs após cadastrar
                    janelaCadastroTransportadoras['empresa'].update('')
                    janelaCadastroTransportadoras['email'].update('')
                    janelaCadastroTransportadoras['tel'].update('')
                    janelaCadastroTransportadoras['cod'].update('')

                    sg.popup('Cadastro efetuado', title='Cadastrado', auto_close=True)

            elif event == 'Consultar':

                transportadoraBusca = values['empresa'].upper().strip()
                c.execute('SELECT empresa, email, telefone, cod_ratreio FROM transportadora WHERE UPPER(empresa) = ?',
                          (transportadoraBusca,))

                registros = c.fetchall()

                # atualizar
                janelaConsultaTransportadoras['tabela'].update(values=registros)

            elif event == 'Mostrar todos':
                c.execute('SELECT empresa, email, telefone, cod_ratreio FROM transportadora')

                registros = c.fetchall()
                janelaConsultaTransportadoras['tabela'].update(values=registros)
#
    if event == 'Consulta Clientes':

        def edit_record(new_name, old_name):
            c.execute('UPDATE clientes SET nome = ?, email = ? WHERE nome = ?', (new_name, new_email, old_name))
            conn.commit()


        # Função para excluir um registro
        def delete_record(name):
            c.execute('DELETE FROM clientes WHERE nome = ?', (name,))
            conn.commit()

        consulta_layout = [
            [sg.Text("Nome do cliente")],
            [sg.InputText(key="nome")],
            [sg.Button("Consultar")],
            [sg.Button("Cancelar")],
            [sg.Table(values=[], headings=["nome", "email", "telefone"], display_row_numbers=False, auto_size_columns=False, num_rows=10, key="tabela")],
            [sg.Button("Editar")],
            [sg.Button("Excluir")]
        ]

        consulta_window = sg.Window("Consulta de Clientes", consulta_layout, resizable=True)

        while True:
            event, values = consulta_window.read()

            if event == sg.WIN_CLOSED or event == "Cancelar":
                consulta_window.close()
                break

            # Operações no banco de dados
            cliente_busca = values["nome"].upper()
            c.execute("SELECT nome, email, telefone FROM clientes WHERE UPPER(nome) = ?", (cliente_busca,))
            registros = c.fetchall()



            # Atualizar a tabela com os registros da consulta
            tabela = consulta_window["tabela"]
            tabela.update(values=registros)

            if event == "Editar":
                selected_row = values["tabela"]
                if selected_row:
                    selected_row_index = selected_row[0]
                    row_data = registros[selected_row_index]
                    edited_nome = sg.popup_get_text("Editar nome:", default_text=row_data[0])
                    if edited_nome is not None:
                        old_nome = row_data[0]
                        edit_record(edited_nome, row_data[1], old_nome)
                        registros[selected_row_index] = (edited_nome, row_data[1])
                        consulta_window["tabela"].update(values=registros)

            elif event == "Excluir":
                selected_row = values['tabela']
                if selected_row:
                    selected_row_index = selected_row[0]
                    row_data = registros[selected_row_index]
                    if sg.popup_yes_no('Tem certeza que deseja excluir este registro?', title='Confirmação') == 'Yes':
                        nome_to_delete = row_data[0]
                        delete_record(nome_to_delete)
                        registros.pop(selected_row_index)
                        consulta_window["tabela"].update(values=registros)

        consulta_window_tela.close()




    if event == 'Consulta Transportadoras':
        consulta_layout = [
            [sg.Text("Nome da Transportadora")],
            [sg.InputText(key="nome_transportadora")],
            [sg.Button("Consultar")],
            [sg.Button("Cancelar")],
            [sg.Table(values=[], headings=["nome_transportadora", "codigo_rastreamento"], display_row_numbers=False, auto_size_columns=False,
                      num_rows=10, key="tabela3")]
        ]

        consulta_window = sg.Window("Consulta da Transportadora", consulta_layout, resizable=True)

        while True:
            event, values = consulta_window.read()

            if event == sg.WIN_CLOSED or event == "Cancelar":
                consulta_window.close()
                break

            # Operações no banco de dados
            transportadora_busca = values["nome_transportadora"].upper()
            c.execute("SELECT nome_transportadora, codigo_transportadora FROM Transportadora WHERE UPPER(nome_transportadora) = ?", (transportadora_busca))
            registros = c.fetchall()

            # Atualizar a tabela com os registros da consulta
            tabela = consulta_window["tabela3"]
            tabela.update(values=registros)

        consulta_window.close()

    if event == 'Relatório Clientes':
        # Abre a tela de consulta
        layoutTexto = [
            [sg.Text('Deseja gerar relátorio de clientes?'), sg.InputText(key='nome', visible=False)]
        ]

        layoutButton = [
            [sg.Button('Sim'), sg.Button('Não')]
        ]

        layoutRelatorioCentralizado = [
            [sg.Column(layoutTexto, justification='c')],
            [sg.Column(layoutButton, justification='c')]
        ]

        janelaRelatorio = sg.Window('Relatório de clientes', layoutRelatorioCentralizado, size=(400, 100))

        # Loop de eventos
        while True:
            event, values = janelaRelatorio.read()

            if event == sg.WINDOW_CLOSED or event == 'Não':
                janelaRelatorio.close()
                break

            if registro:
                with open("relatorio.html", "w") as f:
                    f.write("<html><head><style> * {"
                            "margin: 0;"
                            "padding: 0;"
                            "}"
                            "body {"
                            "background-color: #ADD8E6;}"
                            "h1 {"
                            "text-align: center;"
                            "}"
                            ".container {"
                            "display: flex;"
                            "justify-content: center;"
                            "flex-direction: column;"
                            "}"
                            "td {"
                            "padding: 5px;"
                            "}"
                            "</style></head><body>")
                    f.write("<section class='container'><h1>Relatório</h1><table border='1'><tr><th>Nome</th><th>E-mail</th><th>Telefone</th></tr>")

                    for row in registro:
                        f.write(f'<tr><td>{row[0]}</td><td>{row[1]}</td><td>{row[2]}</td></tr>')
                    f.write('</table></section></body></html>')

                sg.popup("Relatório gerado com sucesso!", title="Relatório")

            else:
                sg.popup("Produto não encontrado no banco de dados!", title="Relatório")

            clienteBuscar = values['nome'].upper()
            c.execute('SELECT * FROM clientes WHERE UPPER(nome) = ?', (clienteBuscar,))
            registro = c.fetchall()

            # Limpar inputs
            relatorio_window["produto"].update("")

        relatorio_window.close()

#


# Fecha a tela principal
window.close()

# Fecha a conexão com o BD
conn.close()
